<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.project.mapper.master.ProjectFieldValuesMapper">
    <resultMap id="BaseResultMap" type="com.project.entity.ProjectFieldValues">
        <id column="id_project_field_value" property="idProjectFieldValue" jdbcType="INTEGER" />
        <result column="id_project" property="idProject" jdbcType="INTEGER" />
        <result column="id_project_field" property="idProjectField" jdbcType="INTEGER" />
        <result column="value" property="value" jdbcType="VARCHAR" />
		<result column="files" property="files" jdbcType="VARCHAR" />
		<result column="position" property="position" jdbcType="INTEGER" />
	</resultMap>
    <sql id="Base_Column_List">
      id_project_field_value, id_project, id_project_field, `value`, `files`, `position`
	</sql>
	<insert id="insertSelective" parameterType="com.project.entity.ProjectFieldValues" useGeneratedKeys="true"
            keyProperty="idProjectFieldValue">
		insert into project_field_values
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="idProjectFieldValue != null">
				id_project_field_value,
			</if>
			<if test="idProject != null">
				id_project,
			</if>
			<if test="idProjectField != null">
				id_project_field,
			</if>
			<if test="value != null">
				`value`,
			</if>
			<if test="files != null and files != ''">
				files,
			</if>
			<if test="position != null">
				`position`
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="idProjectFieldValue != null">
				#{idProjectFieldValue,jdbcType=INTEGER},
			</if>
			<if test="idProject != null">
				#{idProject,jdbcType=INTEGER},
			</if>
			<if test="idProjectField != null">
				#{idProjectField,jdbcType=INTEGER},
			</if>
			<if test="value != null">
				#{value,jdbcType=VARCHAR},
			</if>
			<if test="files != null and files != ''">
				#{files,jdbcType=VARCHAR},
			</if>
			<if test="position != null">
				#{position,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<update id="updateSelective" parameterType="com.project.entity.ProjectFieldValues">
		update project_field_values
		<set>
			<if test="value != null">
				`value` = #{value,jdbcType=VARCHAR},
			</if>
			<if test="files != null">
				files = #{files,jdbcType=VARCHAR},
			</if>
			<if test="position != null">
				`position` = #{position,jdbcType=INTEGER}
			</if>
		</set>
		where id_project_field_value = #{idProjectFieldValue,jdbcType=INTEGER}
	</update>
	<select id="selectIsExitsUnCommit" resultType="com.project.entity.ProjectFieldValues">
		SELECT
		pf.`name` AS 'fieldName',
		pfv.`id_project_field_value` AS 'idProjectFieldValue',
		pfv.`id_project_field` AS 'idProjectField',
		pfv.`id_project` AS 'idProject',
		pfv.`value`,
		pfv.`files`,
		pfv.`position`
		FROM project_field_values pfv
		LEFT JOIN project p ON p.`id_project` = pfv.`id_project`
		LEFT JOIN project_field pf ON pf.`id_project_field` = pfv.`id_project_field`
		WHERE p.id_project_state = 1
		AND p.`id_inspect_plan` = #{idInspectionPlan,jdbcType=INTEGER}
	</select>
	<delete id="deleteProjectValues">
		DELETE FROM `project_field_values` WHERE id_project = #{idProject,jdbcType=INTEGER}
	</delete>
    <select id="selectByIdProject" resultType="com.project.entity.ProjectFieldValues">
		SELECT
		pf.`name` AS 'fieldName',
		pfv.`id_project_field_value` AS 'idProjectFieldValue',
		pfv.`id_project_field` AS 'idProjectField',
		pfv.`id_project` AS 'idProject',
		pfv.`value`,
		pfv.`files`,
		pfv.`position`
		FROM project_field_values pfv
		LEFT JOIN project_field pf ON pf.`id_project_field` = pfv.`id_project_field`
		WHERE pfv.`id_project` = #{idProject, jdbcType=INTEGER}
	</select>
	<insert id="addProjectFieldValues"
			parameterType="com.project.entity.ProjectFieldValues">
      insert into project_field_values
		(id_project_field_value,
		`id_project`,
		`id_project_field`,
		`value`,
		`files`,
		`position`)
		values
		<foreach collection="projectFieldValuesList" item="item" separator=",">
			(#{item.idProjectFieldValue},
			#{item.idProject},
			#{item.idProjectField},
			#{item.value},
			#{item.files},
			#{item.position}
			)
		</foreach>
	</insert>
</mapper>